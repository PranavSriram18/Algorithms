Running with basic trace (size=5):
 --- modulename: perf, funcname: <module>
<string>(1):  --- modulename: perf, funcname: inefficient_matrix_operation
perf.py(23):     result = 0
perf.py(24):     accumulator = 0
perf.py(25):     special_count = 0
perf.py(27):     for i in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(27):     for i in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(27):     for i in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(27):     for i in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(32):                     special_count += 1
perf.py(33):                     value = (i + 1) * (j + 2) * (k + 3) % 7
perf.py(36):                     processed = process_element(value)
 --- modulename: perf, funcname: process_element
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
 --- modulename: perf, funcname: <genexpr>
perf.py(16):     return sum(math.sqrt(abs(value+i)) for i in range(100))
perf.py(39):                     accumulator = update_accumulator(accumulator, processed)
 --- modulename: perf, funcname: update_accumulator
perf.py(20):     return acc + math.log(abs(value) + 1.)
perf.py(41):                     result += processed
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(31):                 if is_special_value(i, j, k):
 --- modulename: perf, funcname: is_special_value
perf.py(10):     eps = 1e-6
perf.py(11):     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
perf.py(12):     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
perf.py(29):             for k in range(size):
perf.py(28):         for j in range(size):
perf.py(27):     for i in range(size):
perf.py(43):     return result, accumulator, special_count
lines   cov%   module   (path)
   48    37%   perf   (/Users/pranavsriram/Library/CloudStorage/GoogleDrive-pranav.a.sriram@gmail.com/My Drive/programming_2024/algorithms/compilers/perf.py)

Running with profiler (size=20):
         866420 function calls in 0.064 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   278053    0.032    0.000    0.047    0.000 /Users/pranavsriram/Library/CloudStorage/GoogleDrive-pranav.a.sriram@gmail.com/My Drive/programming_2024/algorithms/compilers/perf.py:16(<genexpr>)
     2753    0.010    0.000    0.057    0.000 {built-in method builtins.sum}
   275300    0.009    0.000    0.009    0.000 {built-in method math.sqrt}
   278053    0.006    0.000    0.006    0.000 {built-in method builtins.abs}
     8000    0.002    0.000    0.003    0.000 /Users/pranavsriram/Library/CloudStorage/GoogleDrive-pranav.a.sriram@gmail.com/My Drive/programming_2024/algorithms/compilers/perf.py:8(is_special_value)
        1    0.002    0.002    0.064    0.064 /Users/pranavsriram/Library/CloudStorage/GoogleDrive-pranav.a.sriram@gmail.com/My Drive/programming_2024/algorithms/compilers/perf.py:22(inefficient_matrix_operation)
     2753    0.001    0.000    0.058    0.000 /Users/pranavsriram/Library/CloudStorage/GoogleDrive-pranav.a.sriram@gmail.com/My Drive/programming_2024/algorithms/compilers/perf.py:14(process_element)
     2753    0.001    0.000    0.001    0.000 /Users/pranavsriram/Library/CloudStorage/GoogleDrive-pranav.a.sriram@gmail.com/My Drive/programming_2024/algorithms/compilers/perf.py:18(update_accumulator)
     8000    0.000    0.000    0.000    0.000 {built-in method math.cos}
     8000    0.000    0.000    0.000    0.000 {built-in method math.sin}
     2753    0.000    0.000    0.000    0.000 {built-in method math.log}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


