>>>>>> import cProfile
>>>>>> import math
>>>>>> import pstats
>>>>>> import sys
>>>>>> import trace
>>>>>> from pstats import SortKey
       
>>>>>> def is_special_value(x, y, z):
           # Simulate some complex check
   64:     eps = 1e-6
   64:     x, y, z = 1.0 * x + eps, 1.0 * y + eps, 1.0 * z + eps
   64:     return math.sin(x/(y+z)) * math.cos(y/(x+z)) > 0.5
       
>>>>>> def process_element(value):
           # Simulate data processing
 1632:     return sum(math.sqrt(abs(value+i)) for i in range(100))
       
>>>>>> def update_accumulator(acc, value):
           # Simulate updating some running calculations
   16:     return acc + math.log(abs(value) + 1.)
       
>>>>>> def inefficient_matrix_operation(size):
    1:     result = 0
    1:     accumulator = 0
    1:     special_count = 0
           
    5:     for i in range(size):
   20:         for j in range(size):
   80:             for k in range(size):
                       # Check if this is a special value
   64:                 if is_special_value(i, j, k):
   16:                     special_count += 1
   16:                     value = (i + 1) * (j + 2) * (k + 3) % 7
                           
                           # Process the value
   16:                     processed = process_element(value)
                           
                           # Update running calculations
   16:                     accumulator = update_accumulator(accumulator, processed)
                           
   16:                     result += processed
                           
    1:     return result, accumulator, special_count
       
       # 1. Basic trace
>>>>>> def run_with_trace():
>>>>>>     tracer = trace.Trace(
>>>>>>         ignoredirs=[sys.prefix, sys.exec_prefix],
>>>>>>         trace=1,
>>>>>>         count=1
           )
>>>>>>     tracer.run('inefficient_matrix_operation(4)')
           # Save counts to a file
>>>>>>     r = tracer.results()
>>>>>>     r.write_results(show_missing=True, summary=True)
       
       # 2. Profile with cProfile
>>>>>> def run_with_profile():
>>>>>>     profiler = cProfile.Profile()
>>>>>>     profiler.enable()
>>>>>>     inefficient_matrix_operation(20)  # Larger size for more obvious results
>>>>>>     profiler.disable()
           
           # Print sorted stats
>>>>>>     stats = pstats.Stats(profiler).sort_stats(SortKey.TIME)
>>>>>>     stats.print_stats()
       
>>>>>> if __name__ == "__main__":
>>>>>>     print("Running with basic trace (size=5):")
>>>>>>     run_with_trace()
           
>>>>>>     print("\nRunning with profiler (size=20):")
>>>>>>     run_with_profile()
